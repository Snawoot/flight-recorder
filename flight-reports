#!/usr/bin/env python3

import sys
import argparse
import logging
import sqlite3
import time
import enum
import os
import os.path
import itertools
import collections
from datetime import datetime, timedelta

QUERY = """
SELECT id,
       TRUE,
       last_ts - duration AS ts
FROM flight
UNION ALL
SELECT id,
       FALSE,
       last_ts
FROM flight
ORDER BY ts
"""

MINUS_INF = float("-inf")
PLUS_INF = float("+inf")

Range = collections.namedtuple('Range', ('id', 'begin', 'end'))

class Event(enum.Enum):
    DOWNTIME = 0
    FLIGHT = 1
    UPTIME = 2

def parse_args():
    parser = argparse.ArgumentParser(
        description="Reports system crashes and downtime duration",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    def_db_path = os.path.join(os.path.expanduser("~"),
                               ".flight-recorder", "flight-recorder.db")
    parser.add_argument("-d", "--database",
                        help="database path",
                        default=def_db_path)
    return parser.parse_args()

def ts2str(ts):
    return "-INF" if ts == MINUS_INF else datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')

def td2str(td):
    return "INF" if td == PLUS_INF else str(timedelta(seconds=td))

def gen_ranges(conn):
    cur = conn.cursor()
    last_uptime = MINUS_INF
    open_ranges = dict()
    downtime_id = 1
    try:
        cur.execute(QUERY)
        for row in cur:
            flight_id, is_open, ts = row
            if is_open:
                if not open_ranges:
                    # Gap detected - yield DOWNTIME
                    yield Event.DOWNTIME, Range(downtime_id, last_uptime, ts)
                    downtime_id += 1
                open_ranges[flight_id] = ts
            else:
                yield Event.FLIGHT, Range(flight_id, open_ranges[flight_id], ts)
                open_ranges.pop(flight_id)
                last_uptime = ts
    finally:
        cur.close()

def aggregate_uptimes(source):
    uptime_id = 1
    for k, g in itertools.groupby(source, key=lambda v: v[0]):
        if k is Event.FLIGHT:
            flights = list(g)
            uptime_begin = min(flights, key=lambda v: v[1].begin)[1].begin
            uptime_end = max(flights, key=lambda v: v[1].end)[1].end
            yield Event.UPTIME, Range(uptime_id, uptime_begin, uptime_end)
            uptime_id += 1
            for elem in flights:
                yield elem
        else:
            for elem in g:
                yield elem

def report(conn):
    for evt, info in aggregate_uptimes(gen_ranges(conn)):
        if evt is Event.UPTIME:
            print()
        print("%s%s #%d: %s => %s (%s)" % ("\t" if evt is Event.FLIGHT else "",
                                           evt.name,
                                           info.id,
                                           ts2str(info.begin),
                                           ts2str(info.end),
                                           td2str(info.end - info.begin)))

def main():
    args = parse_args()

    try:
        conn = sqlite3.connect(args.database)
    except Exception as exc:
        print("DB connection failed: %s" % str(exc), file=sys.stderr)
        raise SystemExit(3)

    try:
        report(conn)
    finally:
        conn.close()

if __name__ == '__main__':
    main()
